流程控制：
流程：按照一定的顺序去执行
流程控制：通过指定的语言让程序有条件的去执行

代码执行顺序：
1.顺序执行
2.选择执行
  单路分支
  if(条件){
     //条件成立 执行
  }
  双路分支
  if(条件){
    //条件成立 执行
  }else{
    //条件不成立 执行
  }
  多路分支
  if(条件1){
    //条件1成立 执行
  }else if(条件2)｛
     //条件2成立 执行
  ｝else if(条件3)｛
     //条件3成立 执行
  ｝....else{
     //以上条件都不成立 执行
  }
  嵌套分支
  if(条件)｛
     if(条件)｛

     ｝else{

     }
  ｝else{
     if(条件)｛

     ｝else{

     }
  }

  switch(值){
     case 值1:
     执行代码
     break;
     case 值2:
     执行代码
     break;
     ....
     default:
     都不满足执行;
     break;
  }
   switch 适合匹配单个值
   if(){}else{}  适合于判断一段范围

   
3.循环执行
  用于：1.把某段代码重复执行指定次数
        2.我们需要一个变化值 1 2 3 4 5 6....
  for(var 变量=初始值;变量<结束值;变化值){
       //循环执行的代码
  }
  while(条件){
     //条件满足  执行代码

  }
  
  do{
    //执行代码
  }while(条件)
for   我们知道循环的次数
while 我们不知道循环的次数，我们给他一个结束条件

do while 先不管条件，先执行一次代码，然后判断条件满足不满足



for(var i=0;i<10;i++){
      if(i==5){
         alert(5);
      }	
}


跳转语句

1.break  终止整个循环
2.continue  终止当前循环   （终止某次循环）


名字: for(var i=0;i<10;i++){
          for(var j=0;j<10;j++){
               break 名字;  ||  continue 名字;

          }
      }





函数：把完成某一特定功能的代码封装起来，可以重复去调用。


var aa=10；
函数的声明方式：
1.function关键字  基本声明方式
  function 函数名([参数1],[参数2]，....){
       //函数执行的代码;
       return; 
  }
  
函数名()
//return 1.终止函数执行
         2.给函数一个返回值
函数返回值
     默认返回值 undefined  
     如果我们需要返回值  加return  返回值;
以function关键字 声明的函数，可以在声明之前调用
2.以字面量方式声明函数
              匿名函数
var 变量名=function ([参数1],[参数2],...){
	//函数执行代码
}

变量名()

以字面量的方式 声明的函数  只能在声明之后去调用


声明函数的时候给的参数 叫做 形参
调用函数的时候给的参数 叫做 实参
函数的参数 是一一对应的
3.以对象的方式去声明函数
 var 变量名 =  new Function(["参数1"],["参数2"],...,"函数体")

函数的调用方式

1. 函数名()   变量名() 

2. 以事件的方式去调用
  

3. 自调用
1. 实现某个功能的函数只需要执行一次 
(funtion(){

   })()

(function(){}())     


!function(){}()
























